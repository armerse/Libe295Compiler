/* The following code was generated by JFlex 1.4.3 on 2/22/12 9:25 PM */

/* 
Author: Sreeram Ramalingam
Description: This is the main flex file with the Lexer specification used to generate Lexer.java )
*/

package com.libe295.compiler.sr;


import com.libe295.compiler.sr.enums.*;
import java_cup.runtime.*;
import java_cup.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/22/12 9:25 PM from the specification file
 * <tt>C:/Users/Sreeram/Courses/workspace-old/JParser-PS2/src/main/jflex/Libe295-Spring2012.flex</tt>
 */
public class Scanner implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRINGCONST = 2;
  public static final int CHARCONST = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\50\1\6"+
    "\2\0\1\51\1\53\1\7\1\37\1\40\1\13\1\55\1\47\1\54"+
    "\1\0\1\12\10\11\2\5\1\46\1\45\1\61\1\56\1\62\1\63"+
    "\1\0\4\4\1\72\6\4\1\67\3\4\1\66\1\73\1\4\1\71"+
    "\1\4\1\70\5\4\1\43\1\10\1\44\1\52\1\4\1\0\1\17"+
    "\1\14\1\21\1\30\1\16\1\33\1\34\1\22\1\26\1\4\1\20"+
    "\1\31\1\65\1\24\1\23\2\4\1\15\1\32\1\25\1\27\1\35"+
    "\1\36\1\4\1\64\1\4\1\41\1\60\1\42\1\57\53\0\1\4"+
    "\12\0\1\4\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u013f\4"+
    "\31\0\162\4\4\0\14\4\16\0\5\4\11\0\1\4\213\0\1\4"+
    "\13\0\1\4\1\0\3\4\1\0\1\4\1\0\24\4\1\0\54\4"+
    "\1\0\46\4\1\0\5\4\4\0\202\4\10\0\105\4\1\0\46\4"+
    "\2\0\2\4\6\0\20\4\41\0\46\4\2\0\1\4\7\0\47\4"+
    "\110\0\33\4\5\0\3\4\56\0\32\4\5\0\13\4\25\0\12\5"+
    "\4\0\2\4\1\0\143\4\1\0\1\4\17\0\2\4\7\0\2\4"+
    "\12\5\3\4\2\0\1\4\20\0\1\4\1\0\36\4\35\0\3\4"+
    "\60\0\46\4\13\0\1\4\u0152\0\66\4\3\0\1\4\22\0\1\4"+
    "\7\0\12\4\4\0\12\5\25\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\1\4\3\0\4\4\3\0\1\4\36\0\2\4"+
    "\1\0\3\4\4\0\12\5\2\4\23\0\6\4\4\0\2\4\2\0"+
    "\26\4\1\0\7\4\1\0\2\4\1\0\2\4\1\0\2\4\37\0"+
    "\4\4\1\0\1\4\7\0\12\5\2\0\3\4\20\0\11\4\1\0"+
    "\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\3\0"+
    "\1\4\22\0\1\4\17\0\2\4\4\0\12\5\25\0\10\4\2\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\3\0"+
    "\1\4\36\0\2\4\1\0\3\4\4\0\12\5\1\0\1\4\21\0"+
    "\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0"+
    "\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\10\4\1\0"+
    "\3\4\55\0\11\5\25\0\10\4\1\0\3\4\1\0\27\4\1\0"+
    "\12\4\1\0\5\4\46\0\2\4\4\0\12\5\25\0\10\4\1\0"+
    "\3\4\1\0\27\4\1\0\12\4\1\0\5\4\3\0\1\4\40\0"+
    "\1\4\1\0\2\4\4\0\12\5\25\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\20\4\46\0\2\4\4\0\12\5\25\0\22\4\3\0"+
    "\30\4\1\0\11\4\1\0\1\4\2\0\7\4\72\0\60\4\1\0"+
    "\2\4\14\0\7\4\11\0\12\5\47\0\2\4\1\0\1\4\2\0"+
    "\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0"+
    "\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\0"+
    "\2\4\11\0\1\4\2\0\5\4\1\0\1\4\11\0\12\5\2\0"+
    "\2\4\42\0\1\4\37\0\12\5\26\0\10\4\1\0\42\4\35\0"+
    "\4\4\164\0\42\4\1\0\5\4\1\0\2\4\25\0\12\5\6\0"+
    "\6\4\112\0\46\4\12\0\51\4\7\0\132\4\5\0\104\4\5\0"+
    "\122\4\6\0\7\4\1\0\77\4\1\0\1\4\1\0\4\4\2\0"+
    "\7\4\1\0\1\4\1\0\4\4\2\0\47\4\1\0\1\4\1\0"+
    "\4\4\2\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0"+
    "\1\4\1\0\4\4\2\0\7\4\1\0\7\4\1\0\27\4\1\0"+
    "\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\47\4\1\0"+
    "\23\4\16\0\11\5\56\0\125\4\14\0\u026c\4\2\0\10\4\12\0"+
    "\32\4\5\0\113\4\25\0\15\4\1\0\4\4\16\0\22\4\16\0"+
    "\22\4\16\0\15\4\1\0\3\4\17\0\64\4\43\0\1\4\4\0"+
    "\1\4\3\0\12\5\46\0\12\5\6\0\130\4\10\0\51\4\127\0"+
    "\35\4\51\0\12\5\36\4\2\0\5\4\u038b\0\154\4\224\0\234\4"+
    "\4\0\132\4\6\0\26\4\2\0\6\4\2\0\46\4\2\0\6\4"+
    "\2\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\37\4"+
    "\2\0\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4"+
    "\3\0\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0\7\4"+
    "\164\0\1\4\15\0\1\4\202\0\1\4\4\0\1\4\2\0\12\4"+
    "\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\4\4\1\0\3\4\1\0\7\4\3\0\3\4\5\0\5\4"+
    "\u0ebb\0\2\4\52\0\5\4\5\0\2\4\4\0\126\4\6\0\3\4"+
    "\1\0\132\4\1\0\4\4\5\0\50\4\4\0\136\4\21\0\30\4"+
    "\70\0\20\4\u0200\0\u19b6\4\112\0\u51a6\4\132\0\u048d\4\u0773\0\u2ba4\4"+
    "\u215c\0\u012e\4\2\0\73\4\225\0\7\4\14\0\5\4\5\0\1\4"+
    "\1\0\12\4\1\0\15\4\1\0\5\4\1\0\1\4\1\0\2\4"+
    "\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0\66\4"+
    "\50\0\14\4\164\0\5\4\1\0\207\4\23\0\12\5\7\0\32\4"+
    "\6\0\32\4\13\0\131\4\3\0\6\4\2\0\6\4\2\0\6\4"+
    "\2\0\3\4\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\15\3\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\2\37\1\40\2\1\2\41\1\42\1\1\1\0\1\43"+
    "\1\44\6\3\1\45\1\3\1\46\7\3\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\0\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\2\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\16\0\5\3\1\104\4\3"+
    "\1\105\3\3\1\0\1\106\1\107\1\72\1\110\1\111"+
    "\1\112\1\113\1\114\1\0\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\2\3\1\125\1\126\2\3"+
    "\1\127\2\3\1\130\1\131\1\3\1\0\1\72\1\0"+
    "\1\132\3\3\1\133\1\3\1\134\1\0\1\135\2\3"+
    "\1\136\1\0\2\3\1\0\1\137\1\140\20\0\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\264\0\u012c\0\u0168"+
    "\0\264\0\264\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0"+
    "\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0"+
    "\0\u04ec\0\264\0\264\0\264\0\264\0\264\0\264\0\264"+
    "\0\264\0\264\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654"+
    "\0\u0690\0\264\0\u06cc\0\u0708\0\u0744\0\264\0\u0780\0\u07bc"+
    "\0\264\0\264\0\u07f8\0\u0834\0\u0870\0\264\0\264\0\u08ac"+
    "\0\u08e8\0\264\0\264\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14"+
    "\0\u0a50\0\u012c\0\u0a8c\0\u012c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c"+
    "\0\u0bb8\0\u0bf4\0\u0c30\0\264\0\264\0\264\0\264\0\264"+
    "\0\264\0\264\0\u0c6c\0\264\0\264\0\264\0\264\0\u0ca8"+
    "\0\264\0\u0ce4\0\264\0\u0d20\0\264\0\264\0\264\0\264"+
    "\0\u0d5c\0\264\0\264\0\264\0\264\0\264\0\264\0\264"+
    "\0\264\0\264\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4"+
    "\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4"+
    "\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u012c\0\u120c\0\u1248"+
    "\0\u1284\0\u12c0\0\u012c\0\u12fc\0\u1338\0\u1374\0\u13b0\0\264"+
    "\0\264\0\u13ec\0\264\0\264\0\264\0\264\0\264\0\u1428"+
    "\0\264\0\264\0\264\0\264\0\264\0\264\0\264\0\264"+
    "\0\u1464\0\u14a0\0\u012c\0\u012c\0\u14dc\0\u1518\0\u012c\0\u1554"+
    "\0\u1590\0\u012c\0\u012c\0\u15cc\0\u1608\0\264\0\u1644\0\u012c"+
    "\0\u1680\0\u16bc\0\u16f8\0\u012c\0\u1734\0\u012c\0\u1770\0\u012c"+
    "\0\u17ac\0\u17e8\0\u012c\0\u1824\0\u1860\0\u189c\0\u18d8\0\u012c"+
    "\0\u012c\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c"+
    "\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c"+
    "\0\u1c98\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\10\1\13\1\14\1\15\1\16\1\17\2\7\1\20"+
    "\4\7\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\10\7"+
    "\1\57\1\60\1\61\3\57\1\62\1\57\1\63\63\57"+
    "\1\64\1\65\1\66\4\64\1\67\1\70\63\64\76\0"+
    "\1\6\75\0\2\7\3\0\1\7\2\0\23\7\25\0"+
    "\10\7\5\0\1\10\3\0\1\10\75\0\1\71\42\0"+
    "\1\72\73\0\1\73\21\0\2\7\3\0\1\7\2\0"+
    "\1\7\1\74\21\7\25\0\10\7\4\0\2\7\3\0"+
    "\1\7\2\0\2\7\1\75\20\7\25\0\10\7\4\0"+
    "\2\7\3\0\1\7\2\0\15\7\1\76\5\7\25\0"+
    "\10\7\4\0\2\7\3\0\1\7\2\0\6\7\1\77"+
    "\1\100\13\7\25\0\10\7\4\0\2\7\3\0\1\7"+
    "\2\0\10\7\1\101\6\7\1\102\3\7\25\0\10\7"+
    "\4\0\2\7\3\0\1\7\2\0\10\7\1\103\12\7"+
    "\25\0\10\7\4\0\2\7\3\0\1\7\2\0\7\7"+
    "\1\104\13\7\25\0\10\7\4\0\2\7\3\0\1\7"+
    "\2\0\7\7\1\105\13\7\25\0\10\7\4\0\2\7"+
    "\3\0\1\7\2\0\6\7\1\106\3\7\1\107\10\7"+
    "\25\0\10\7\4\0\2\7\3\0\1\7\2\0\7\7"+
    "\1\110\13\7\25\0\10\7\4\0\2\7\3\0\1\7"+
    "\2\0\7\7\1\111\13\7\25\0\10\7\4\0\2\7"+
    "\3\0\1\7\2\0\7\7\1\112\13\7\25\0\10\7"+
    "\4\0\2\7\3\0\1\7\2\0\6\7\1\113\14\7"+
    "\25\0\10\7\56\0\1\114\73\0\1\115\73\0\1\116"+
    "\70\0\1\117\2\0\1\120\71\0\1\121\74\0\1\122"+
    "\1\123\73\0\1\124\73\0\1\125\1\0\1\126\71\0"+
    "\1\127\2\0\1\130\70\0\1\131\3\0\1\132\11\0"+
    "\1\57\2\0\3\57\1\0\1\57\1\0\63\57\2\0"+
    "\1\61\71\0\1\133\1\134\1\135\3\133\1\136\1\137"+
    "\1\140\1\141\2\133\1\142\1\143\1\133\1\144\4\133"+
    "\1\145\1\146\5\133\1\147\1\133\1\150\25\133\1\151"+
    "\10\133\7\0\1\152\66\0\1\66\71\0\2\153\1\0"+
    "\3\153\1\154\1\155\1\156\1\157\2\153\1\160\1\161"+
    "\1\153\1\162\4\153\1\163\1\164\5\153\1\165\1\153"+
    "\1\166\25\153\1\167\10\153\13\71\1\170\60\71\4\0"+
    "\2\7\3\0\1\7\2\0\2\7\1\171\20\7\25\0"+
    "\10\7\4\0\2\7\3\0\1\7\2\0\11\7\1\172"+
    "\11\7\25\0\10\7\4\0\2\7\3\0\1\7\2\0"+
    "\16\7\1\173\4\7\25\0\10\7\4\0\2\7\3\0"+
    "\1\7\2\0\3\7\1\174\17\7\25\0\10\7\4\0"+
    "\2\7\3\0\1\7\2\0\10\7\1\175\12\7\25\0"+
    "\10\7\4\0\2\7\3\0\1\7\2\0\11\7\1\176"+
    "\11\7\25\0\10\7\4\0\2\7\3\0\1\7\2\0"+
    "\16\7\1\177\4\7\25\0\10\7\4\0\2\7\3\0"+
    "\1\7\2\0\10\7\1\200\12\7\25\0\10\7\4\0"+
    "\2\7\3\0\1\7\2\0\7\7\1\201\13\7\25\0"+
    "\10\7\4\0\2\7\3\0\1\7\2\0\20\7\1\202"+
    "\2\7\25\0\10\7\4\0\2\7\3\0\1\7\2\0"+
    "\1\7\1\203\21\7\25\0\10\7\4\0\2\7\3\0"+
    "\1\7\2\0\11\7\1\204\11\7\25\0\10\7\4\0"+
    "\2\7\3\0\1\7\2\0\12\7\1\205\10\7\25\0"+
    "\10\7\4\0\2\7\3\0\1\7\2\0\12\7\1\206"+
    "\10\7\25\0\10\7\15\0\1\207\134\0\1\210\73\0"+
    "\1\211\17\0\1\135\102\0\1\212\71\0\1\213\73\0"+
    "\1\214\73\0\1\215\73\0\1\216\73\0\1\217\1\0"+
    "\1\220\71\0\1\221\73\0\1\222\73\0\1\223\73\0"+
    "\1\224\73\0\1\225\73\0\1\226\73\0\1\227\73\0"+
    "\1\230\64\0\12\71\1\6\1\170\60\71\4\0\2\7"+
    "\3\0\1\7\2\0\3\7\1\231\17\7\25\0\10\7"+
    "\4\0\2\7\3\0\1\7\2\0\13\7\1\232\7\7"+
    "\25\0\10\7\4\0\2\7\3\0\1\7\2\0\2\7"+
    "\1\233\20\7\25\0\10\7\4\0\2\7\3\0\1\7"+
    "\2\0\1\7\1\234\21\7\25\0\10\7\4\0\2\7"+
    "\3\0\1\7\2\0\11\7\1\235\11\7\25\0\10\7"+
    "\4\0\2\7\3\0\1\7\2\0\12\7\1\236\10\7"+
    "\25\0\10\7\4\0\2\7\3\0\1\7\2\0\20\7"+
    "\1\237\2\7\25\0\10\7\4\0\2\7\3\0\1\7"+
    "\2\0\1\7\1\240\21\7\25\0\10\7\4\0\2\7"+
    "\3\0\1\7\2\0\10\7\1\241\12\7\25\0\10\7"+
    "\4\0\2\7\3\0\1\7\2\0\7\7\1\242\13\7"+
    "\25\0\10\7\4\0\2\7\3\0\1\7\2\0\14\7"+
    "\1\243\6\7\25\0\10\7\4\0\2\7\3\0\1\7"+
    "\2\0\15\7\1\244\5\7\25\0\10\7\16\0\1\245"+
    "\66\0\1\246\71\0\1\217\1\0\1\247\66\0\2\7"+
    "\3\0\1\7\2\0\4\7\1\250\16\7\25\0\10\7"+
    "\4\0\2\7\3\0\1\7\2\0\1\7\1\251\21\7"+
    "\25\0\10\7\4\0\2\7\3\0\1\7\2\0\12\7"+
    "\1\252\10\7\25\0\10\7\4\0\2\7\3\0\1\7"+
    "\2\0\20\7\1\253\2\7\25\0\10\7\4\0\2\7"+
    "\3\0\1\7\2\0\11\7\1\254\11\7\25\0\10\7"+
    "\4\0\2\7\3\0\1\7\2\0\2\7\1\255\20\7"+
    "\25\0\10\7\4\0\2\7\3\0\1\7\2\0\2\7"+
    "\1\256\20\7\25\0\10\7\25\0\1\257\55\0\1\217"+
    "\70\0\2\7\3\0\1\7\2\0\10\7\1\260\12\7"+
    "\25\0\10\7\4\0\2\7\3\0\1\7\2\0\10\7"+
    "\1\261\12\7\25\0\10\7\4\0\2\7\3\0\1\7"+
    "\2\0\10\7\1\262\12\7\25\0\10\7\4\0\2\7"+
    "\3\0\1\7\2\0\14\7\1\263\6\7\25\0\10\7"+
    "\27\0\1\264\50\0\2\7\3\0\1\7\2\0\13\7"+
    "\1\265\7\7\25\0\10\7\4\0\2\7\3\0\1\7"+
    "\2\0\2\7\1\266\20\7\25\0\10\7\15\0\1\267"+
    "\62\0\2\7\3\0\1\7\2\0\2\7\1\270\20\7"+
    "\25\0\10\7\4\0\2\7\3\0\1\7\2\0\14\7"+
    "\1\271\6\7\25\0\10\7\24\0\1\272\101\0\1\273"+
    "\125\0\1\274\74\0\1\275\22\0\1\276\102\0\1\277"+
    "\101\0\1\300\130\0\1\301\74\0\1\302\74\0\1\303"+
    "\74\0\1\304\74\0\1\305\74\0\1\306\45\0\1\307"+
    "\70\0\1\310\105\0\1\311\75\0\1\312\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7380];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\2\11\17\1\11\11"+
    "\7\1\1\11\3\1\1\11\2\1\2\11\3\1\2\11"+
    "\1\1\1\0\2\11\20\1\7\11\1\0\4\11\1\1"+
    "\1\11\1\1\1\11\1\1\4\11\1\1\11\11\16\0"+
    "\16\1\1\0\2\11\1\1\5\11\1\0\10\11\14\1"+
    "\1\0\1\11\1\0\7\1\1\0\4\1\1\0\2\1"+
    "\1\0\2\1\20\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer stringVal = new StringBuffer(); //used to store the value of a String Constant
  StringBuffer stringStr = new StringBuffer(); //used to store the actual text of a Character/String Constant

 private Symbol symbol(int type) {
    return new Libe295Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Libe295Symbol(type, yyline+1, yycolumn+1, value);
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1326) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { return symbol(GTEQ);
          }
        case 98: break;
        case 1: 
          { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
          }
        case 99: break;
        case 20: 
          { return symbol(XOR);
          }
        case 100: break;
        case 28: 
          { return symbol(GT);
          }
        case 101: break;
        case 72: 
          { yybegin(YYINITIAL); stringStr.append(yytext()); return symbol(CHARACTER_LITERAL, new Character(yytext().charAt(1));
          }
        case 102: break;
        case 39: 
          { return symbol(NOTEQ);
          }
        case 103: break;
        case 94: 
          { return symbol(SIGNED);
          }
        case 104: break;
        case 11: 
          { return symbol(LBRACE);
          }
        case 105: break;
        case 24: 
          { return symbol(EQ);
          }
        case 106: break;
        case 44: 
          { return symbol(MINUSMINUS);
          }
        case 107: break;
        case 95: 
          { return symbol(CONTINUE);
          }
        case 108: break;
        case 38: 
          { return symbol(DO);
          }
        case 109: break;
        case 45: 
          { return symbol(PLUSPLUS);
          }
        case 110: break;
        case 27: 
          { return symbol(LT);
          }
        case 111: break;
        case 43: 
          { return symbol(ANDEQ);
          }
        case 112: break;
        case 40: 
          { return symbol(MODEQ);
          }
        case 113: break;
        case 58: 
          { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   stringVal.append( val ); stringStr.append( yytext() );
          }
        case 114: break;
        case 34: 
          { yybegin(YYINITIAL); stringStr.append(yytext()); return (new CharConstant(stringStr.toString(),yyline,yycolumn, new Character((char)Character.UNASSIGNED)));
          }
        case 115: break;
        case 53: 
          { stringVal.append( yytext().charAt(1) ); stringStr.append( yytext() );
          }
        case 116: break;
        case 91: 
          { return symbol(SHORT);
          }
        case 117: break;
        case 81: 
          { yybegin(YYINITIAL); stringStr.append(yytext()); return symbol(CHARACTER_LITERAL, new Character('\t'));
          }
        case 118: break;
        case 46: 
          { return symbol(EQEQ);
          }
        case 119: break;
        case 87: 
          { return symbol(LONG);
          }
        case 120: break;
        case 26: 
          { return symbol(OR);
          }
        case 121: break;
        case 23: 
          { return symbol(PLUS);
          }
        case 122: break;
        case 6: 
          { yybegin(CHARCONST); stringStr.setLength(0); stringStr.append(yytext());
          }
        case 123: break;
        case 10: 
          { return symbol(RPAREN);
          }
        case 124: break;
        case 52: 
          { return symbol(RSHIFT);
          }
        case 125: break;
        case 36: 
          { return symbol(MULTEQ);
          }
        case 126: break;
        case 80: 
          { yybegin(YYINITIAL); stringStr.append(yytext()); return symbol(CHARACTER_LITERAL, new Character('\n'));
          }
        case 127: break;
        case 65: 
          { stringVal.append( new Character((char) 11) ); stringStr.append( yytext() );
          }
        case 128: break;
        case 88: 
          { return symbol(GOTO);
          }
        case 129: break;
        case 69: 
          { return symbol(FOR);
          }
        case 130: break;
        case 56: 
          { stringVal.append( '\'' ); stringStr.append(yytext() );
          }
        case 131: break;
        case 66: 
          { stringVal.append( new Character('?') ); stringStr.append( yytext() );
          }
        case 132: break;
        case 57: 
          { stringVal.append( '\\' ); stringStr.append( yytext() );
          }
        case 133: break;
        case 59: 
          { stringVal.append( '\b' ); stringStr.append( yytext() );
          }
        case 134: break;
        case 55: 
          { stringVal.append( '\"' ); stringStr.append( yytext());
          }
        case 135: break;
        case 35: 
          { return symbol(DIVEQ);
          }
        case 136: break;
        case 67: 
          { yybegin(YYINITIAL); stringStr.append(yytext()); return symbol(CHARACTER_LITERAL, new Character(yytext().charAt(0)));
          }
        case 137: break;
        case 29: 
          { return symbol(QUESTION);
          }
        case 138: break;
        case 7: 
          { return symbol(DIV);
          }
        case 139: break;
        case 86: 
          { return symbol(CHAR);
          }
        case 140: break;
        case 37: 
          { return symbol(IF);
          }
        case 141: break;
        case 3: 
          { return symbol(IDENTIFIER, yytext());
          }
        case 142: break;
        case 41: 
          { return symbol(XOREQ);
          }
        case 143: break;
        case 70: 
          { return symbol(LSHIFTEQ);
          }
        case 144: break;
        case 19: 
          { return symbol(MOD);
          }
        case 145: break;
        case 64: 
          { stringVal.append( '\f' ); stringStr.append( yytext() );
          }
        case 146: break;
        case 62: 
          { stringVal.append( '\n' ); stringStr.append( yytext() );
          }
        case 147: break;
        case 9: 
          { return symbol(LPAREN);
          }
        case 148: break;
        case 50: 
          { return symbol(LSHIFT);
          }
        case 149: break;
        case 90: 
          { return symbol(BREAK);
          }
        case 150: break;
        case 25: 
          { return symbol(COMP);
          }
        case 151: break;
        case 97: 
          { return symbol(MINUSEQ);
          }
        case 152: break;
        case 78: 
          { yybegin(YYINITIAL); stringStr.append(yytext());return symbol(CHARACTER_LITERAL, new Character('\r'));
          }
        case 153: break;
        case 60: 
          { stringVal.append( '\r' ); stringStr.append( yytext() );
          }
        case 154: break;
        case 84: 
          { yybegin(YYINITIAL); stringStr.append(yytext()); return symbol(CHARACTER_LITERAL, new Character('\r'));
          }
        case 155: break;
        case 77: 
          { yybegin(YYINITIAL); stringStr.append(yytext()); return symbol(CHARACTER_LITERAL, new Character('\b'));
          }
        case 156: break;
        case 47: 
          { return symbol(OREQ);
          }
        case 157: break;
        case 76: 
          { yybegin(YYINITIAL); 
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                              stringStr.append(yytext());
			                            return symbol(CHARACTER_LITERAL, new Character((char)val));;
          }
        case 158: break;
        case 14: 
          { return symbol(RBRACK);
          }
        case 159: break;
        case 15: 
          { return symbol(SEMICOLON);
          }
        case 160: break;
        case 4: 
          { return symbol(INTEGER_LITERAL, new Integer(yytext()));
          }
        case 161: break;
        case 63: 
          { stringVal.append( '\t' ); stringStr.append( yytext() );
          }
        case 162: break;
        case 73: 
          { yybegin(YYINITIAL); stringStr.append(yytext()); return symbol(CHARACTER_LITERAL, new Character('\"'));
          }
        case 163: break;
        case 22: 
          { return symbol(MINUS);
          }
        case 164: break;
        case 61: 
          { stringVal.append( new Character((char) 7) ); stringStr.append( yytext() );
          }
        case 165: break;
        case 71: 
          { return symbol(RSHIFTEQ);
          }
        case 166: break;
        case 68: 
          { return symbol(INT);
          }
        case 167: break;
        case 74: 
          { yybegin(YYINITIAL); stringStr.append(yytext()); return symbol(CHARACTER_LITERAL, new Character('\''));
          }
        case 168: break;
        case 83: 
          { yybegin(YYINITIAL); stringStr.append(yytext()); return symbol(CHARACTER_LITERAL, new Character((char)11));
          }
        case 169: break;
        case 21: 
          { return symbol(AND);
          }
        case 170: break;
        case 31: 
          { yybegin(YYINITIAL); throw new RuntimeException("Unterminated string at end of line");
          }
        case 171: break;
        case 79: 
          { yybegin(YYINITIAL); stringStr.append(yytext()); return symbol(CHARACTER_LITERAL, new Character((char)7))
          }
        case 172: break;
        case 75: 
          { yybegin(YYINITIAL); stringStr.append(yytext());  return symbol(CHARACTER_LITERAL, new Character('\\'));
          }
        case 173: break;
        case 32: 
          { yybegin(YYINITIAL); stringStr.append( yytext() ); return symbol(STRING_LITERAL, stringVal.toString());
          }
        case 174: break;
        case 16: 
          { return symbol(COLON);
          }
        case 175: break;
        case 49: 
          { return symbol(LTEQ);
          }
        case 176: break;
        case 96: 
          { return symbol(UNSIGNED);
          }
        case 177: break;
        case 89: 
          { return symbol(VOID);
          }
        case 178: break;
        case 18: 
          { return symbol(NOT);
          }
        case 179: break;
        case 12: 
          { return symbol(RBRACE);
          }
        case 180: break;
        case 8: 
          { return symbol(MULT);
          }
        case 181: break;
        case 2: 
          { /* ignore */
          }
        case 182: break;
        case 30: 
          { stringVal.append( yytext() ); stringStr.append( yytext() );
          }
        case 183: break;
        case 13: 
          { return symbol(LBRACK);
          }
        case 184: break;
        case 48: 
          { return symbol(OROR);
          }
        case 185: break;
        case 33: 
          { yybegin(YYINITIAL); throw new RuntimeException("Unterminated character literal at end of line");
          }
        case 186: break;
        case 82: 
          { yybegin(YYINITIAL); stringStr.append(yytext()); return symbol(CHARACTER_LITERAL, new Character('\f'));
          }
        case 187: break;
        case 42: 
          { return symbol(ANDAND);
          }
        case 188: break;
        case 92: 
          { return symbol(WHILE);
          }
        case 189: break;
        case 54: 
          { stringStr.append( yytext());
          }
        case 190: break;
        case 85: 
          { return symbol(ELSE);
          }
        case 191: break;
        case 5: 
          { yybegin(STRINGCONST); stringVal.setLength(0); stringStr.setLength(0); stringStr.append(yytext());
          }
        case 192: break;
        case 17: 
          { return symbol(COMMA);
          }
        case 193: break;
        case 93: 
          { return symbol(RETURN);
          }
        case 194: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
