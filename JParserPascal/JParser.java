
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Thu Feb 23 02:17:59 EST 2012
//----------------------------------------------------

package com.pascal.compiler.sr;

import java_cup.runtime.*;
import com.libe295.compiler.sr.ptree.*;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Thu Feb 23 02:17:59 EST 2012
  */
public class JParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public JParser() {super();}

  /** Constructor which sets the default scanner. */
  public JParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\003\005\000\002\002\004\000\002\004" +
    "\006\000\002\005\002\000\002\005\003\000\002\005\005" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\007\006\000\002\012\003\000\002\012\003\000\002" +
    "\013\003\000\002\014\010\000\002\010\006\000\002\015" +
    "\003\000\002\015\005\000\002\016\003\000\002\011\005" +
    "\000\002\020\007\000\002\020\011\000\002\021\002\000" +
    "\002\021\003\000\002\021\005\000\002\022\005\000\002" +
    "\023\003\000\002\023\005\000\002\024\002\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\025\005\000\002\027\006\000\002\027\010\000" +
    "\002\030\006\000\002\031\005\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\006\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\004\000\002\033\005\000\002\026\003\000" +
    "\002\026\006\000\002\032\003\000\002\032\005\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\017\003\000\002\040" +
    "\003\000\002\041\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\004\015\005\001\002\000\004\002\173\001" +
    "\002\000\012\006\ufffe\016\011\020\013\021\012\001\002" +
    "\000\004\030\171\001\002\000\006\006\ufffb\030\ufffb\001" +
    "\002\000\004\046\170\001\002\000\004\047\023\001\002" +
    "\000\004\047\023\001\002\000\004\047\023\001\002\000" +
    "\006\006\ufffa\030\ufffa\001\002\000\006\006\ufffd\030\130" +
    "\001\002\000\006\006\ufff9\030\ufff9\001\002\000\004\006" +
    "\020\001\002\000\014\006\033\010\uffe6\011\027\030\uffe6" +
    "\047\023\001\002\000\010\007\uffe5\010\uffe5\030\uffe5\001" +
    "\002\000\004\010\127\001\002\000\062\004\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\014\uffbf\017\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\001\002\000\006\010\uffe8\030\125" +
    "\001\002\000\006\034\112\045\123\001\002\000\010\007" +
    "\uffe3\010\uffe3\030\uffe3\001\002\000\022\012\054\023\045" +
    "\024\040\032\050\047\023\050\041\051\051\052\057\001" +
    "\002\000\010\007\uffe4\010\uffe4\030\uffe4\001\002\000\010" +
    "\007\uffe2\010\uffe2\030\uffe2\001\002\000\010\032\037\034" +
    "\ufff0\045\ufff0\001\002\000\014\006\033\010\uffe6\011\027" +
    "\030\uffe6\047\023\001\002\000\006\034\uffd2\045\uffd2\001" +
    "\002\000\004\010\036\001\002\000\010\007\uffdd\010\uffdd" +
    "\030\uffdd\001\002\000\022\012\054\023\045\024\040\032" +
    "\050\047\023\050\041\051\051\052\057\001\002\000\022" +
    "\012\uffc1\023\uffc1\024\uffc1\032\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\001\002\000\050\004\uffbd\007\uffbd\010\uffbd" +
    "\014\uffbd\017\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\030" +
    "\uffbd\031\uffbd\033\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\001\002\000\004\033\115\001" +
    "\002\000\052\004\uffd9\007\uffd9\010\uffd9\014\uffd9\017\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\030\uffd9\031\uffd9\033" +
    "\uffd9\034\112\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\001\002\000\050\004\uffdc\007\uffdc\010" +
    "\uffdc\014\uffdc\017\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\030\uffdc\031\uffdc\033\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\001\002\000\022\012\uffc2" +
    "\023\uffc2\024\uffc2\032\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\001\002\000\050\004\uffda\007\uffda\010\uffda\014\uffda" +
    "\017\uffda\022\uffda\023\uffda\024\uffda\025\uffda\030\uffda\031" +
    "\uffda\033\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda" +
    "\042\uffda\043\uffda\001\002\000\056\004\ufff0\007\ufff0\010" +
    "\ufff0\014\ufff0\017\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0" +
    "\001\002\000\022\012\054\023\045\024\040\032\050\047" +
    "\023\050\041\051\051\052\057\001\002\000\050\004\uffbe" +
    "\007\uffbe\010\uffbe\014\uffbe\017\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\030\uffbe\031\uffbe\033\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\001\002\000" +
    "\050\004\uffdb\007\uffdb\010\uffdb\014\uffdb\017\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\030\uffdb\031\uffdb\033\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\001\002\000\036\004\063\014\077\022\075\023\067\024" +
    "\062\025\064\031\106\033\uffd0\036\066\037\070\040\072" +
    "\041\071\042\061\043\065\001\002\000\022\012\uffc0\023" +
    "\uffc0\024\uffc0\032\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\001\002\000\054\004\uffd2\007\uffd2\010\uffd2\014\uffd2\017" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\030\uffd2\031\uffd2" +
    "\032\103\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\001\002\000\022\012\054" +
    "\023\045\024\040\032\050\047\023\050\041\051\051\052" +
    "\057\001\002\000\050\004\uffbc\007\uffbc\010\uffbc\014\uffbc" +
    "\017\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\030\uffbc\031" +
    "\uffbc\033\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\001\002\000\050\004\063\007\uffd4\010" +
    "\uffd4\014\077\017\uffd4\022\075\023\067\024\062\025\064" +
    "\030\uffd4\031\uffd4\033\uffd4\035\uffd4\036\066\037\070\040" +
    "\072\041\071\042\061\043\065\001\002\000\022\012\uffca" +
    "\023\uffca\024\uffca\032\uffca\047\uffca\050\uffca\051\uffca\052" +
    "\uffca\001\002\000\022\012\uffc7\023\uffc7\024\uffc7\032\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\001\002\000\022\012" +
    "\uffc3\023\uffc3\024\uffc3\032\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\001\002\000\022\012\uffc4\023\uffc4\024\uffc4\032" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\001\002\000\022" +
    "\012\uffc9\023\uffc9\024\uffc9\032\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\001\002\000\022\012\uffcc\023\uffcc\024\uffcc" +
    "\032\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\001\002\000" +
    "\022\012\uffc8\023\uffc8\024\uffc8\032\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\001\002\000\022\012\uffcd\023\uffcd\024" +
    "\uffcd\032\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\001\002" +
    "\000\022\012\uffcb\023\uffcb\024\uffcb\032\uffcb\047\uffcb\050" +
    "\uffcb\051\uffcb\052\uffcb\001\002\000\022\012\uffce\023\uffce" +
    "\024\uffce\032\uffce\047\uffce\050\uffce\051\uffce\052\uffce\001" +
    "\002\000\022\012\054\023\045\024\040\032\050\047\023" +
    "\050\041\051\051\052\057\001\002\000\022\012\054\023" +
    "\045\024\040\032\050\047\023\050\041\051\051\052\057" +
    "\001\002\000\022\012\uffc5\023\uffc5\024\uffc5\032\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\001\002\000\022\012\054" +
    "\023\045\024\040\032\050\047\023\050\041\051\051\052" +
    "\057\001\002\000\022\012\uffc6\023\uffc6\024\uffc6\032\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\052\uffc6\001\002\000\050\004" +
    "\uffd5\007\uffd5\010\uffd5\014\uffd5\017\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\030\uffd5\031\uffd5\033\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\001\002" +
    "\000\050\004\063\007\uffd7\010\uffd7\014\077\017\uffd7\022" +
    "\075\023\067\024\062\025\064\030\uffd7\031\uffd7\033\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\001\002\000\050\004\063\007\uffd6\010\uffd6\014\uffd6" +
    "\017\uffd6\022\075\023\uffd6\024\uffd6\025\064\030\uffd6\031" +
    "\uffd6\033\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\001\002\000\022\012\054\023\045\024" +
    "\040\032\050\047\023\050\041\051\051\052\057\001\002" +
    "\000\004\033\105\001\002\000\050\004\uffd8\007\uffd8\010" +
    "\uffd8\014\uffd8\017\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\030\uffd8\031\uffd8\033\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\001\002\000\022\012\054" +
    "\023\045\024\040\032\050\047\023\050\041\051\051\052" +
    "\057\001\002\000\004\033\uffcf\001\002\000\034\004\063" +
    "\014\077\022\075\023\067\024\062\025\064\033\111\036" +
    "\066\037\070\040\072\041\071\042\061\043\065\001\002" +
    "\000\050\004\uffd3\007\uffd3\010\uffd3\014\uffd3\017\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\030\uffd3\031\uffd3\033\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\001\002\000\022\012\054\023\045\024\040\032\050" +
    "\047\023\050\041\051\051\052\057\001\002\000\034\004" +
    "\063\014\077\022\075\023\067\024\062\025\064\035\114" +
    "\036\066\037\070\040\072\041\071\042\061\043\065\001" +
    "\002\000\054\004\uffd1\007\uffd1\010\uffd1\014\uffd1\017\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\030\uffd1\031\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\045\uffd1\001\002\000\010\007\uffde\010" +
    "\uffde\030\uffde\001\002\000\034\004\063\014\077\017\117" +
    "\022\075\023\067\024\062\025\064\036\066\037\070\040" +
    "\072\041\071\042\061\043\065\001\002\000\016\006\033" +
    "\007\uffe6\010\uffe6\011\027\030\uffe6\047\023\001\002\000" +
    "\010\007\121\010\uffe0\030\uffe0\001\002\000\016\006\033" +
    "\007\uffe6\010\uffe6\011\027\030\uffe6\047\023\001\002\000" +
    "\010\007\uffdf\010\uffdf\030\uffdf\001\002\000\022\012\054" +
    "\023\045\024\040\032\050\047\023\050\041\051\051\052" +
    "\057\001\002\000\040\004\063\007\uffe1\010\uffe1\014\077" +
    "\022\075\023\067\024\062\025\064\030\uffe1\036\066\037" +
    "\070\040\072\041\071\042\061\043\065\001\002\000\014" +
    "\006\033\010\uffe6\011\027\030\uffe6\047\023\001\002\000" +
    "\004\010\uffe7\001\002\000\010\006\uffff\030\uffff\046\uffff" +
    "\001\002\000\012\006\ufffe\016\011\020\013\021\012\001" +
    "\002\000\004\006\ufffc\001\002\000\004\036\133\001\002" +
    "\000\006\005\140\047\023\001\002\000\006\006\ufff7\030" +
    "\ufff7\001\002\000\006\006\ufff6\030\ufff6\001\002\000\010" +
    "\006\ufff5\030\ufff5\033\ufff5\001\002\000\006\006\ufff8\030" +
    "\ufff8\001\002\000\004\034\141\001\002\000\004\050\041" +
    "\001\002\000\004\035\143\001\002\000\004\013\144\001" +
    "\002\000\006\005\140\047\023\001\002\000\006\006\ufff4" +
    "\030\ufff4\001\002\000\006\031\152\044\ufff2\001\002\000" +
    "\004\044\150\001\002\000\006\005\140\047\023\001\002" +
    "\000\006\006\ufff3\030\ufff3\001\002\000\004\047\023\001" +
    "\002\000\004\044\ufff1\001\002\000\004\032\155\001\002" +
    "\000\006\033\uffec\047\023\001\002\000\004\044\166\001" +
    "\002\000\006\030\164\033\uffeb\001\002\000\004\033\161" +
    "\001\002\000\006\030\uffee\044\162\001\002\000\004\047" +
    "\023\001\002\000\004\030\uffed\001\002\000\006\033\uffec" +
    "\047\023\001\002\000\004\033\uffea\001\002\000\004\047" +
    "\023\001\002\000\006\030\uffe9\033\uffe9\001\002\000\004" +
    "\002\001\001\002\000\012\006\ufffe\016\011\020\013\021" +
    "\012\001\002\000\006\006\uffef\030\uffef\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\004\003\003\001\001\000\002\001\001\000" +
    "\020\004\007\005\016\006\014\007\006\010\013\011\015" +
    "\020\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\153\001\001\000\010\015\146" +
    "\016\145\017\046\001\001\000\004\017\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\016\033\017\031\023\021\024\023\025" +
    "\020\026\024\027\027\030\025\031\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\054" +
    "\017\046\026\042\033\115\037\055\040\051\041\043\042" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\016\033\017\031\023\034\024\023\025" +
    "\020\026\024\027\027\030\025\031\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\016" +
    "\054\017\046\026\042\032\041\033\052\037\055\040\051" +
    "\041\043\042\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\016\054\017\046\026\042\033\107\037\055\040\051" +
    "\041\043\042\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\034\073\035\072\036\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\054\017\046\026" +
    "\042\033\057\037\055\040\051\041\043\042\045\001\001" +
    "\000\002\001\001\000\010\034\073\035\072\036\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\054\017\046\026\042\033\101\037" +
    "\055\040\051\041\043\042\045\001\001\000\022\016\054" +
    "\017\046\026\042\033\100\037\055\040\051\041\043\042" +
    "\045\001\001\000\002\001\001\000\022\016\054\017\046" +
    "\026\042\033\077\037\055\040\051\041\043\042\045\001" +
    "\001\000\002\001\001\000\010\034\073\035\072\036\075" +
    "\001\001\000\010\034\073\035\072\036\075\001\001\000" +
    "\010\034\073\035\072\036\075\001\001\000\024\016\054" +
    "\017\046\026\042\032\103\033\052\037\055\040\051\041" +
    "\043\042\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\016\054\017\046\026\042\032\106\033\052\037" +
    "\055\040\051\041\043\042\045\001\001\000\002\001\001" +
    "\000\010\034\073\035\072\036\075\001\001\000\002\001" +
    "\001\000\022\016\054\017\046\026\042\033\112\037\055" +
    "\040\051\041\043\042\045\001\001\000\010\034\073\035" +
    "\072\036\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\073\035\072\036\075\001\001\000\022\016" +
    "\033\017\031\024\117\025\020\026\024\027\027\030\025" +
    "\031\030\001\001\000\002\001\001\000\022\016\033\017" +
    "\031\024\121\025\020\026\024\027\027\030\025\031\030" +
    "\001\001\000\002\001\001\000\022\016\054\017\046\026" +
    "\042\033\123\037\055\040\051\041\043\042\045\001\001" +
    "\000\010\034\073\035\072\036\075\001\001\000\024\016" +
    "\033\017\031\023\125\024\023\025\020\026\024\027\027" +
    "\030\025\031\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\130\006\014\007\006\010\013\011\015" +
    "\020\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\136\013\133\014\134\017\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\144\013\133\014" +
    "\134\017\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\150\013\133\014\134\017" +
    "\135\001\001\000\002\001\001\000\010\015\152\016\145" +
    "\017\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\155\017\046\021\157\022\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\162\017\135\001\001\000\002\001\001" +
    "\000\012\016\155\017\046\021\164\022\156\001\001\000" +
    "\002\001\001\000\006\013\166\017\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\171\005\016\006" +
    "\014\007\006\010\013\011\015\020\005\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token) {
        report_error("Sytax error at line " + (cur_token.left+1) +
            ", column " + cur_token.right, null);
    }

    public void initSymbolTable(int size) {
        symtab = new SymbolTable(size);
    }

    public SymbolTable getSymbolTable() {
        return symtab;
    }

    public SymbolTable symtab;
    public FunctionEntry entry;
    public final int PROC_SYMTAB_SIZE = 25;

    public void enterVars(TreeNodeList vars, TreeNode type) {
        TreeNode node;
        TreeNodeList rest;
        boolean done  = false;
        for (node = vars.node, rest = vars.siblings; !done; ) {
            symtab.enter(new VariableEntry(
                (String) (((LeafNode) node).value), type, false, 0));
            if (rest == null) {
                done = true;
            }
            else {
                node = rest.node;
                rest = rest.siblings;
            }
        }
    }

    public void enterFormals(TreeNodeList formals) {
        TreeNode2 node;
        TreeNodeList rest;
        boolean done  = false;
        if (formals == null) return;
        for (node = (TreeNode2)formals.node, rest = formals.siblings; !done; ) {
            symtab.enter(new VariableEntry(
                (String) (((LeafNode) node.child1).value), node.child2,
                false, 0));
            if (rest == null) {
                done = true;
            }
            else {
                node = (TreeNode2) rest.node;
                rest = rest.siblings;
            }
        }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$JParser$actions {
  private final JParser parser;

  /** Constructor */
  CUP$JParser$actions(JParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$JParser$do_action(
    int                        CUP$JParser$act_num,
    java_cup.runtime.lr_parser CUP$JParser$parser,
    java.util.Stack            CUP$JParser$stack,
    int                        CUP$JParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JParser$result;

      /* select the action based on the action number */
      switch (CUP$JParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // character ::= CHAR 
            {
              TreeNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new LeafNode(sym.CHAR, c); 
              CUP$JParser$result = new java_cup.runtime.Symbol(32/*character*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // integer ::= INT 
            {
              TreeNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new LeafNode(sym.INT, i); 
              CUP$JParser$result = new java_cup.runtime.Symbol(31/*integer*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // real ::= REAL 
            {
              TreeNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new LeafNode(sym.REAL, r); 
              CUP$JParser$result = new java_cup.runtime.Symbol(30/*real*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // identifier ::= IDENT 
            {
              LeafNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new LeafNode(sym.IDENT, i); 
              CUP$JParser$result = new java_cup.runtime.Symbol(13/*identifier*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unyop ::= NOT 
            {
              TreeNode1 RESULT = null;
		 RESULT = new TreeNode1(sym.NOT, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(29/*unyop*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unyop ::= MINUS 
            {
              TreeNode1 RESULT = null;
		 RESULT = new TreeNode1(sym.UNY_MINUS, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(29/*unyop*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unyop ::= PLUS 
            {
              TreeNode1 RESULT = null;
		 RESULT = new TreeNode1(sym.UNY_PLUS, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(29/*unyop*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // multop ::= AND 
            {
              TreeNode2 RESULT = null;
		 RESULT = new TreeNode2(sym.AND, null, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(28/*multop*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // multop ::= DIVIDE 
            {
              TreeNode2 RESULT = null;
		 RESULT = new TreeNode2(sym.DIVIDE, null, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(28/*multop*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // multop ::= TIMES 
            {
              TreeNode2 RESULT = null;
		 RESULT = new TreeNode2(sym.TIMES, null, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(28/*multop*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // addop ::= OR 
            {
              TreeNode2 RESULT = null;
		 RESULT = new TreeNode2(sym.OR, null, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(27/*addop*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // addop ::= MINUS 
            {
              TreeNode2 RESULT = null;
		 RESULT = new TreeNode2(sym.MINUS, null, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(27/*addop*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // addop ::= PLUS 
            {
              TreeNode2 RESULT = null;
		 RESULT = new TreeNode2(sym.PLUS, null, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(27/*addop*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relop ::= NOT_EQ 
            {
              TreeNode2 RESULT = null;
		 RESULT = new TreeNode2(sym.NOT, null, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(26/*relop*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relop ::= GTR_EQ 
            {
              TreeNode2 RESULT = null;
		 RESULT = new TreeNode2(sym.GTR, null, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(26/*relop*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relop ::= LESS_EQ 
            {
              TreeNode2 RESULT = null;
		 RESULT = new TreeNode2(sym.LESS, null, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(26/*relop*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // relop ::= EQ 
            {
              TreeNode2 RESULT = null;
		 RESULT = new TreeNode2(sym.EQ, null, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(26/*relop*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // relop ::= GTR 
            {
              TreeNode2 RESULT = null;
		 RESULT = new TreeNode2(sym.GTR, null, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(26/*relop*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // relop ::= LESS 
            {
              TreeNode2 RESULT = null;
		 RESULT = new TreeNode2(sym.LESS, null, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(26/*relop*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exprlist ::= expr COMMA exprlist 
            {
              TreeNodeList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNodeList el = (TreeNodeList)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNodeList(e, el); 
              CUP$JParser$result = new java_cup.runtime.Symbol(24/*exprlist*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exprlist ::= expr 
            {
              TreeNodeList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNodeList(e, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(24/*exprlist*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // designator ::= designator LEFT_BRKT expr RT_BRKT 
            {
              TreeNode RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = new TreeNode2(sym.LEFT_BRKT, d, e); 
              CUP$JParser$result = new java_cup.runtime.Symbol(20/*designator*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // designator ::= var 
            {
              TreeNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = v; 
              CUP$JParser$result = new java_cup.runtime.Symbol(20/*designator*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= LEFT_PAREN expr RT_PAREN 
            {
              TreeNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = e; 
              CUP$JParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= unyop expr 
            {
              TreeNode RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		TreeNode1 op = (TreeNode1)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = op; op.child = e; 
              CUP$JParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr multop expr 
            {
              TreeNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		TreeNode2 op = (TreeNode2)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = op;
                           op.child1 = e1; op.child2 = e2; 
              CUP$JParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr addop expr 
            {
              TreeNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		TreeNode2 op = (TreeNode2)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = op;
                           op.child1 = e1; op.child2 = e2; 
              CUP$JParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr relop expr 
            {
              TreeNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		TreeNode2 op = (TreeNode2)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = op; op.child1 =
                           e1; op.child2 = e2; 
              CUP$JParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= var LEFT_PAREN exprlist RT_PAREN 
            {
              TreeNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		TreeNodeList el = (TreeNodeList)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = new TreeNode2(sym.PROCEDURE, v, el); 
              CUP$JParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= designator 
            {
              TreeNode RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = d; 
              CUP$JParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= character 
            {
              TreeNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = c; 
              CUP$JParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= real 
            {
              TreeNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode r = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = r; 
              CUP$JParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= integer 
            {
              TreeNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode i = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = i; 
              CUP$JParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // compoundstmt ::= BEGIN stmts END 
            {
              TreeNode RESULT = null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		TreeNodeList ss = (TreeNodeList)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = ss; 
              CUP$JParser$result = new java_cup.runtime.Symbol(23/*compoundstmt*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // proccallstmt ::= identifier LEFT_PAREN exprlist RT_PAREN 
            {
              TreeNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		LeafNode i = (LeafNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		TreeNodeList el = (TreeNodeList)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = new TreeNode2(sym.PROCEDURE, i, el); 
              CUP$JParser$result = new java_cup.runtime.Symbol(22/*proccallstmt*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ifstmt ::= IF expr THEN stmt ELSE stmt 
            {
              TreeNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		TreeNode s1 = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode s2 = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNode3(sym.IF, e, s1, s2); 
              CUP$JParser$result = new java_cup.runtime.Symbol(21/*ifstmt*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ifstmt ::= IF expr THEN stmt 
            {
              TreeNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode s = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNode3(sym.IF, e, s, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(21/*ifstmt*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // assmntstmt ::= designator ASSMNT expr 
            {
              TreeNode RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNode2(sym.ASSMNT, d, e); 
              CUP$JParser$result = new java_cup.runtime.Symbol(19/*assmntstmt*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= compoundstmt 
            {
              TreeNode RESULT = null;
		int csleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode cs = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = cs; 
              CUP$JParser$result = new java_cup.runtime.Symbol(18/*stmt*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= proccallstmt 
            {
              TreeNode RESULT = null;
		int psleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode ps = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = ps; 
              CUP$JParser$result = new java_cup.runtime.Symbol(18/*stmt*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= ifstmt 
            {
              TreeNode RESULT = null;
		int isleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode is = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = is; 
              CUP$JParser$result = new java_cup.runtime.Symbol(18/*stmt*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= assmntstmt 
            {
              TreeNode RESULT = null;
		int asleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode as = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = as; 
              CUP$JParser$result = new java_cup.runtime.Symbol(18/*stmt*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= 
            {
              TreeNode RESULT = null;
		 RESULT = new LeafNode(0, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(18/*stmt*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmts ::= stmt SEMI stmts 
            {
              TreeNodeList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		TreeNode s = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNodeList ss = (TreeNodeList)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNodeList(s, ss); 
              CUP$JParser$result = new java_cup.runtime.Symbol(17/*stmts*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmts ::= stmt 
            {
              TreeNodeList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode s = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNodeList(s, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(17/*stmts*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formal ::= var COLON identtype 
            {
              TreeNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int itleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode it = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNode2(sym.COLON, v, it); 
              CUP$JParser$result = new java_cup.runtime.Symbol(16/*formal*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formals ::= formal SEMI formals 
            {
              TreeNodeList RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNodeList fs = (TreeNodeList)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNodeList(f, fs); 
              CUP$JParser$result = new java_cup.runtime.Symbol(15/*formals*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formals ::= formal 
            {
              TreeNodeList RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNodeList(f, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(15/*formals*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formals ::= 
            {
              TreeNodeList RESULT = null;
		 RESULT = null; 
              CUP$JParser$result = new java_cup.runtime.Symbol(15/*formals*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // prochdr ::= PROCEDURE identifier LEFT_PAREN formals RT_PAREN COLON identtype 
            {
              TreeNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).right;
		LeafNode i = (LeafNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-5)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		TreeNodeList fs = (TreeNodeList)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int itleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode it = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNode4(sym.PROCEDURE, i, fs,
                                                      it, null);
                          parser.symtab = parser.symtab.newLevel(parser.entry =
                              new FunctionEntry((String) i.value, it, fs,
                                  null, null), parser.PROC_SYMTAB_SIZE);
                          parser.enterFormals(fs); 
              CUP$JParser$result = new java_cup.runtime.Symbol(14/*prochdr*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // prochdr ::= PROCEDURE identifier LEFT_PAREN formals RT_PAREN 
            {
              TreeNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		LeafNode i = (LeafNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		TreeNodeList fs = (TreeNodeList)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = new TreeNode4(sym.PROCEDURE, i, fs,
                                                     null, null);
                           // NOTE: the parent procdecl rule sets child4 to the
                           //       procedure block
                          parser.symtab = parser.symtab.newLevel(parser.entry =
                              new FunctionEntry((String) i.value, null, fs,
                                  null, null), parser.PROC_SYMTAB_SIZE);
                          parser.enterFormals(fs); 
              CUP$JParser$result = new java_cup.runtime.Symbol(14/*prochdr*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procdecl ::= prochdr SEMI block 
            {
              TreeNode RESULT = null;
		int phleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int phright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		TreeNode ph = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode b = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = ph; ((TreeNode4) RESULT).child4 = b;
                           parser.entry.body = b;
                           parser.symtab = parser.symtab.ascend(); 
              CUP$JParser$result = new java_cup.runtime.Symbol(7/*procdecl*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var ::= identifier 
            {
              TreeNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		LeafNode i = (LeafNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = i; 
              CUP$JParser$result = new java_cup.runtime.Symbol(12/*var*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vars ::= var COMMA vars 
            {
              TreeNodeList RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNodeList vs = (TreeNodeList)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNodeList(v, vs); 
              CUP$JParser$result = new java_cup.runtime.Symbol(11/*vars*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vars ::= var 
            {
              TreeNodeList RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNodeList(v, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(11/*vars*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // vardecl ::= VAR vars COLON type 
            {
              TreeNode RESULT = null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		TreeNodeList vs = (TreeNodeList)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNode2(sym.VAR, vs, t);
                           parser.enterVars(vs, t); 
              CUP$JParser$result = new java_cup.runtime.Symbol(6/*vardecl*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arraytype ::= ARRAY LEFT_BRKT integer RT_BRKT OF type 
            {
              TreeNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		TreeNode i = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNode2(sym.ARRAY, i, t); 
              CUP$JParser$result = new java_cup.runtime.Symbol(10/*arraytype*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identtype ::= identifier 
            {
              TreeNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		LeafNode i = (LeafNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNode1(sym.IDENT, i); 
              CUP$JParser$result = new java_cup.runtime.Symbol(9/*identtype*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= arraytype 
            {
              TreeNode RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode at = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = at; 
              CUP$JParser$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= identtype 
            {
              TreeNode RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode it = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = it; 
              CUP$JParser$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // typedecl ::= TYPE identifier EQ type 
            {
              TreeNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		LeafNode i = (LeafNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNode2(sym.TYPE, i, t); 
              CUP$JParser$result = new java_cup.runtime.Symbol(5/*typedecl*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl ::= procdecl 
            {
              TreeNode RESULT = null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode pd = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = pd; 
              CUP$JParser$result = new java_cup.runtime.Symbol(4/*decl*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= vardecl 
            {
              TreeNode RESULT = null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode vd = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = vd; 
              CUP$JParser$result = new java_cup.runtime.Symbol(4/*decl*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= typedecl 
            {
              TreeNode RESULT = null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode td = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = td; 
              CUP$JParser$result = new java_cup.runtime.Symbol(4/*decl*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decls ::= decl SEMI decls 
            {
              TreeNodeList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNodeList ds = (TreeNodeList)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNodeList(d, ds); 
              CUP$JParser$result = new java_cup.runtime.Symbol(3/*decls*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decls ::= decl 
            {
              TreeNodeList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-0)).value;
		 RESULT = new TreeNodeList(d, null); 
              CUP$JParser$result = new java_cup.runtime.Symbol(3/*decls*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decls ::= 
            {
              TreeNodeList RESULT = null;
		 RESULT = null; 
              CUP$JParser$result = new java_cup.runtime.Symbol(3/*decls*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= decls BEGIN stmts END 
            {
              TreeNode RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		TreeNodeList d = (TreeNodeList)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		TreeNodeList s = (TreeNodeList)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = new TreeNode2(sym.BEGIN, d, s); 
              CUP$JParser$result = new java_cup.runtime.Symbol(2/*block*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		TreeNode start_val = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		RESULT = start_val;
              CUP$JParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$JParser$parser.done_parsing();
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM block DOT 
            {
              TreeNode RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		TreeNode b = (TreeNode)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = new TreeNode1(sym.PROGRAM, b); 
              CUP$JParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-0)).right, RESULT);
            }
          return CUP$JParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

